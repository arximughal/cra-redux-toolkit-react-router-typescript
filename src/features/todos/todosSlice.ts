import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define an interface for a single todo item
interface Todo {
  id: string;
  text: string;
  completed: boolean;
}

// Define an array of initial todos for testing
const initialTodos: Todo[] = [
  { id: "1", text: "Learn React", completed: false },
  { id: "2", text: "Learn Redux", completed: false },
  { id: "3", text: "Learn TypeScript", completed: true },
];

// Create a slice for the todos feature using createSlice from redux toolkit
const todosSlice = createSlice({
  name: "todos", // A unique name for the slice
  initialState: initialTodos, // The initial state for the slice
  reducers: {
    // An object of reducer functions that modify the state based on actions
    addTodo(state, action: PayloadAction<string>) {
      // Generate a random id for the new todo
      const id = Math.random().toString(36).substr(2, 9);

      // Create a new todo object with the given text and id
      const newTodo: Todo = {
        id,
        text: action.payload,
        completed: false,
      };

      // Push the new todo to the state array
      state.push(newTodo);
    },
    toggleTodo(state, action: PayloadAction<string>) {
      // Find the index of the todo with the given id in the state array
      const index = state.findIndex((todo) => todo.id === action.payload);

      // If the index is valid, toggle the completed property of the todo
      if (index > -1) {
        state[index].completed = !state[index].completed;
      }
    },
    deleteTodo(state, action: PayloadAction<string>) {
      // Filter out the todo with the given id from the state array
      return state.filter((todo) => todo.id !== action.payload);
    },
  },
});

// Export the actions generated by createSlice for this slice
export const { addTodo, toggleTodo, deleteTodo } = todosSlice.actions;

// Export the reducer function as default export for this slice
export default todosSlice.reducer;
